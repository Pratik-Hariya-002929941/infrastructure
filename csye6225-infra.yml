AWSTemplateFormatVersion: "2010-09-09"
Description: Create a VPC with 3 subnets, Internet Gateway, and route table.

# Paramters to take the values on runtime
Parameters:
  VirtualPrivateCloud:
    Default: "10.0.0.0/16"
    Type: String
    Description: Please Enter the IP Address Range for vpc
  PublicSubnet1:
    Default: "10.0.1.0/24"
    Type: String
    Description: Please Enter the IP Address Range for Public Subnet-1
  PublicSubnet2:
    Default: "10.0.2.0/24"
    Type: String
    Description: Please Enter the IP Address Range for Public Subnet-2
  PublicSubnet3:
    Default: "10.0.3.0/24"
    Type: String
    Description: Please Enter the IP Address Range for Public Subnet-3
  ImageValue:
    Default: ""
    Type: String
    Description: Please Enter the image id
  # PrivateSubnet1CIDR:
  #   Default: "10.0.4.0/24"
  #   Type: String
  #   Description: Please Enter the IP Address Range for Private Subnet-1
  # PrivateSubnet2CIDR:
  #   Default: "10.0.5.0/24"
  #   Type: String
  #   Description: Please Enter the IP Address Range for Private Subnet-2
  # PrivateSubnet3CIDR:
  #   Default: "10.0.6.0/24"
  #   Type: String
  #   Description: Please Enter the IP Address Range for Private Subnet-3

Resources:
  # Creating VPC
  VPC6225:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VirtualPrivateCloud
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      InstanceTenancy: "default"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  #creating IGW
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC-InternetGateway

  #Attaching IGW(InternetGateway) with VPC6225
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC6225

  #creating A Public Route Table:
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable
      VpcId: !Ref VPC6225

  #creating A Private Route Table:
  # PrivateRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     Tags:
  #       - Key: Name
  #         Value: Private Route Table
  #     VpcId: !Ref VPC6225

  #creating a public route for public route table with destination CIDR block 0.0.0.0/0 and Above created IGW as target:
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  #creating Public Subnet-1:
  publicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC6225
      CidrBlock: !Ref PublicSubnet1
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1

  #Attaching the public subnets-1 to the Public Route Table:
  RouteTablePublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref publicSubnet1

  #creating Public Subnet-2:
  publicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC6225
      CidrBlock: !Ref PublicSubnet2
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2

  #Attaching the public subnets-2 to the Public Route Table:
  RouteTablePublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref publicSubnet2

  #creating Public Subnet-3:
  publicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC6225
      CidrBlock: !Ref PublicSubnet3
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet3

  #Attaching the public subnets-3 to the Public Route Table:
  RouteTablePublicSubnet3Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref publicSubnet3

  #creating Private Subnet-1:
  # myPrivateSubnet1:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC6225
  #     CidrBlock: !Ref PrivateSubnet1CIDR
  #     AvailabilityZone: !Select [0, !GetAZs ""]
  #     MapPublicIpOnLaunch: false
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${AWS::StackName}-PrivateSubnet1

  #Attaching the private subnets-1 to the private Route Table:
  # PrivateSubnet1RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     SubnetId: !Ref myPrivateSubnet1

  #creating Private Subnet-2:
  # myPrivateSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC6225
  #     CidrBlock: !Ref PrivateSubnet2CIDR
  #     AvailabilityZone: !Select [1, !GetAZs ""]
  #     MapPublicIpOnLaunch: false
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${AWS::StackName}-PrivateSubnet2

  #Attaching the private subnets-2 to the private Route Table:
  # PrivateSubnet2RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     SubnetId: !Ref myPrivateSubnet2

  #creating Private Subnet-3:
  # myPrivateSubnet3:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC6225
  #     CidrBlock: !Ref PrivateSubnet3CIDR
  #     AvailabilityZone: !Select [2, !GetAZs ""]
  #     MapPublicIpOnLaunch: false
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${AWS::StackName}-PrivateSubnet3

  #Attaching the private subnets-3 to the private Route Table:
  # PrivateSubnet3RouteTableAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     SubnetId: !Ref myPrivateSubnet3

  #EC2 Security Group
  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC6225
      GroupDescription: ec2 Security group with ports
      GroupName: application
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ApplicationSecurityGroup


  #EC2 Instance
  ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageValue
      # IamInstanceProfile: !Ref ec2InstanceProfile
      DisableApiTermination: false
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: 50
      NetworkInterfaces:
        - SubnetId: !Ref publicSubnet1
          AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet: [!Ref WebAppSecurityGroup]
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Instance